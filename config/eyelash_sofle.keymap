#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    delay-ms = <0>;                   // 0
};

&mmv {
    trigger-period-ms = <16>;
    time-to-max-speed-ms = <3000>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    lang: lang {
        compatible = "zmk,behavior-tap-dance";
        label = "LANG";
        #binding-cells = <0>;
        bindings = <&kp RIGHT_ALT>, <&kp LC(SPACE)>;
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <15 16>;
        };

        enter {
            bindings = <&kp RETURN>;
            key-positions = <22 23>;
        };

        wsleft {
            bindings = <&kp LA(LC(H))>;
            key-positions = <30 31>;
        };

        wsright {
            bindings = <&kp LA(LC(L))>;
            key-positions = <34 33>;
        };

        bandforth {
            bindings = <&kp LA(S)>;
            key-positions = <40 41>;
        };

        wincap {
            bindings = <&kp LS(LA(LC(S)))>;
            key-positions = <43 42>;
        };

        clipboard {
            bindings = <&kp LS(LA(LC(LG(C))))>;
            key-positions = <17 16>;
        };

        math {
            bindings = <&kp LA(LS(LC(M)))>;
            key-positions = <21 22>;
        };

        searchcommands {
            bindings = <&kp LS(LA(LC(LG(S))))>;
            key-positions = <47 48>;
        };

        qwerty {
            bindings = <&tog 1>;
            key-positions = <41 42>;
        };

        game {
            bindings = <&tog 2>;
            key-positions = <50 49>;
        };

        paren {
            bindings = <&paren>;
            key-positions = <30 34>;
        };

        brackets {
            bindings = <&bracket>;
            key-positions = <17 21>;
        };

        curlies {
            bindings = <&curlies>;
            key-positions = <43 47>;
        };

        lang {
            bindings = <&lang>;
            key-positions = <48 49>;
        };
    };

    behaviors {
    };

    macros {
        paren: paren {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "PAREN";
        };

        bracket: bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKET";
        };

        curlies: curlies {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "CURLIES";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp GRAVE                        &kp NUMBER_1  &kp N2        &kp N3    &kp N4       &kp N5       &kp UP_ARROW     &kp N6        &kp N7    &kp N8        &kp N9    &kp N0            &to 0
&mt LA(LC(LEFT_SHIFT)) TAB       &kp Q         &kp W         &kp F     &kp P        &kp B        &kp DOWN_ARROW   &kp J         &kp L     &kp U         &kp Y     &kp SEMI          &kp BSLH
&mt LA(LC(LG(LEFT_SHIFT))) CAPS  &kp A         &kp R         &kp S     &kp T        &kp G        &kp LEFT_ARROW   &kp M         &kp N     &kp E         &kp I     &kp O             &kp APOS
&kp LEFT_SHIFT                   &kp Z         &kp X         &kp C     &kp D        &kp V        &kp RIGHT_ARROW  &kp K         &kp H     &kp COMMA     &kp DOT   &kp FSLH          &kp LEFT_SHIFT
&kp C_MUTE                       &kp LCTRL     &kp LEFT_GUI  &kp LALT  &lt 3 SPACE  &sk LSHFT    &kp LG(LS(S))    &lt 4 DELETE  &kp BSPC  &kp LEFT_ALT  &kp RGUI  &kp LEFT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "colemak";
        };

        qwerty {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0    &trans
&trans  &kp Q   &kp W   &kp E   &kp R   &kp T     &trans  &kp Y   &kp U   &kp I   &kp O   &kp P     &trans
&trans  &kp A   &kp S   &kp D   &kp F   &kp G     &trans  &kp H   &kp J   &kp K   &kp L   &kp SEMI  &trans
&trans  &kp Z   &kp X   &kp C   &kp V   &kp B     &trans  &kp N   &kp M   &trans  &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "qwerty";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        game {
            label = "game";
            bindings = <
&trans     &kp N1  &kp N2  &kp N3        &kp N4     &kp N5              &trans  &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &trans
&kp TAB    &kp Q   &kp W   &kp E         &kp R      &kp T               &trans  &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&trans     &kp A   &kp S   &kp D         &kp F      &kp G               &trans  &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp APOS
&kp LSHFT  &kp Z   &kp X   &kp C         &kp V      &kp B               &trans  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
&trans     &trans  &trans  &kp LEFT_ALT  &kp SPACE  &kp LEFT_CONTROL    &trans  &trans  &trans  &trans     &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        navmed {
            bindings = <
&bt BT_SEL 0  &kp F1        &kp F2        &kp F3            &kp F4          &kp F5        &mmv MOVE_UP     &kp F6                &kp F7          &kp F8           &kp F9        &kp F10     &kp MINUS
&bt BT_SEL 1  &trans        &mkp LCLK     &mkp MCLK         &mkp RCLK       &mkp MB4      &mmv MOVE_DOWN   &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS  &kp C_VOLUME_UP  &kp C_VOL_DN  &kp C_NEXT  &kp EQUAL
&bt BT_SEL 2  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &mkp MB5      &mmv MOVE_LEFT   &none                 &kp LEFT        &kp DOWN         &kp UP_ARROW  &kp RIGHT   &trans
&bt BT_CLR    &kp K_UNDO    &kp K_CUT     &kp K_COPY        &kp K_PASTE     &kp K_REDO    &mmv MOVE_RIGHT  &kp C_BRIGHTNESS_DEC  &kp HOME        &kp PAGE_DOWN    &kp PAGE_UP   &kp END     &trans
&kp C_MUTE    &trans        &trans        &trans            &trans          &trans        &mkp LCLK        &trans                &kp C_PLAY      &kp F11          &kp F12       &trans
            >;

            display-name = "navmed";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_4 {
            bindings = <
&trans           &trans  &trans      &trans      &trans      &trans               &rgb_ug RGB_SPI  &trans  &trans     &trans            &trans        &trans        &trans
&rgb_ug RGB_BRI  &trans  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &trans               &rgb_ug RGB_SPD  &trans  &trans     &trans            &trans        &trans        &trans
&rgb_ug RGB_BRD  &trans  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp MINUS            &rgb_ug RGB_EFR  &trans  &kp LSHFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &trans
&trans           &trans  &kp N1      &kp LS(N2)  &kp LS(N3)  &kp EQUAL            &rgb_ug RGB_EFF  &trans  &trans     &trans            &trans        &trans        &trans
&trans           &trans  &trans      &trans      &kp LS(N0)  &kp LS(BACKSLASH)    &rgb_ug RGB_TOG  &trans  &trans     &trans            &trans        &trans
            >;
        };
    };
};
