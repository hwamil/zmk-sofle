#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    delay-ms = <0>;                   // 0
};

&mmv {
    trigger-period-ms = <16>;
    time-to-max-speed-ms = <3000>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    ko: ko {
        compatible = "zmk,behavior-tap-dance";
        label = "KO";
        #binding-cells = <0>;
        bindings = <&ko_win>, <&ko_mac>;

        tapping-term-ms = <250>;
    };

    hrmLeft: hrmLeft {
        compatible = "zmk,behavior-hold-tap";
        label = "HRMLEFT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <7 8 9 10 11 12 20 21 22 23 24 25 33 34 35 36 37 38 46 47 48 49 50 51 60 61 62 63 59>;
    };

    hrmRight: hrmRight {
        compatible = "zmk,behavior-hold-tap";
        label = "HRMRIGHT";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "balanced";
        require-prior-idle-ms = <150>;
        quick-tap-ms = <175>;
        hold-trigger-on-release;
        hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 26 27 28 29 30 31 39 40 41 42 43 44 53 54 55 56 57>;
    };

    sticky: sticky {
        compatible = "zmk,behavior-sticky-key";
        label = "STICKY";
        bindings = <&kp>;
        #binding-cells = <1>;
        release-after-ms = <2000>;
        quick-release;
    };

    en: en {
        compatible = "zmk,behavior-tap-dance";
        label = "EN";
        #binding-cells = <0>;
        bindings = <&en_win>, <&en_mac>;

        tapping-term-ms = <250>;
    };

    undo: undo {
        compatible = "zmk,behavior-tap-dance";
        label = "UNDO";
        #binding-cells = <0>;
        bindings = <&kp LC(Z)>, <&kp LG(Z)>;

        tapping-term-ms = <300>;
    };

    cut: cut {
        compatible = "zmk,behavior-tap-dance";
        label = "cut";
        #binding-cells = <0>;
        bindings = <&kp LC(X)>, <&kp LG(X)>;

        tapping-term-ms = <300>;
    };

    copy: copy {
        compatible = "zmk,behavior-tap-dance";
        label = "copy";
        #binding-cells = <0>;
        bindings = <&kp LC(C)>, <&kp LG(C)>;

        tapping-term-ms = <300>;
    };

    paste: paste {
        compatible = "zmk,behavior-tap-dance";
        label = "paste";
        #binding-cells = <0>;
        bindings = <&kp LC(V)>, <&kp LG(V)>;

        tapping-term-ms = <300>;
    };

    redo: redo {
        compatible = "zmk,behavior-tap-dance";
        label = "redo";
        #binding-cells = <0>;
        bindings = <&kp LS(LC(Z))>, <&kp LS(LG(Z))>;

        tapping-term-ms = <300>;
    };

    customlt: customlt {
        compatible = "zmk,behavior-hold-tap";
        label = "CUSTOMLT";
        bindings = <&mo>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <250>;
        flavor = "balanced";
        quick-tap-ms = <200>;
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <15 16>;
            layers = <0 1>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        enter {
            bindings = <&kp RETURN>;
            key-positions = <22 23>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        wsleft {
            bindings = <&kp LA(LC(H))>;
            key-positions = <30 31>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        wsright {
            bindings = <&kp LA(LC(L))>;
            key-positions = <34 33>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        bandforth {
            bindings = <&kp LA(S)>;
            key-positions = <40 41>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        wincap {
            bindings = <&kp LS(LA(LC(S)))>;
            key-positions = <43 42>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        clipboard {
            bindings = <&kp LS(LA(LC(LG(C))))>;
            key-positions = <17 16>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        math {
            bindings = <&kp LA(LS(LC(M)))>;
            key-positions = <21 22>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        searchcommands {
            bindings = <&kp LS(LA(LC(LG(S))))>;
            key-positions = <47 48>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        game {
            bindings = <&tog 2>;
            key-positions = <50 49>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        paren {
            bindings = <&paren>;
            key-positions = <17 21>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        brackets {
            bindings = <&bracket>;
            key-positions = <16 22>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        braces {
            bindings = <&braces>;
            key-positions = <15 23>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        ko {
            bindings = <&ko>;
            key-positions = <48 49>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <31 33>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        en {
            bindings = <&en>;
            key-positions = <41 42>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <14 15>;
            timeout-ms = <75>;
            require-prior-idle-ms = <200>;
        };
    };

    behaviors {
    };

    macros {
        paren: paren {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp N9 &kp N0>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LEFT>;

            label = "PAREN";
        };

        bracket: bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT_ARROW>;
            label = "BRACKET";
        };

        ko_win: ko_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &kp RIGHT_ALT>;
            label = "KO_WIN";
        };

        en_win: en_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &kp RIGHT_ALT>;
            label = "en_win";
        };

        ko_mac: ko_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to 1>,
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>;

            label = "KO_MAC";
        };

        en_mac: en_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to 0>,
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_ALT>;

            label = "EN_MAC";
        };

        braces: braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LEFT_BRACKET &kp RIGHT_BRACKET>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp LEFT>;

            label = "BRACES";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            bindings = <
&kp GRAVE                        &kp NUMBER_1         &kp N2               &kp N3                   &kp N4                 &kp N5           &kp UP_ARROW     &kp N6      &kp N7                  &kp N8                    &kp N9                &kp N0                &to 0
&mt LA(LC(LEFT_SHIFT)) TAB       &kp Q                &kp W                &kp F                    &kp P                  &kp B            &kp DOWN_ARROW   &kp J       &kp L                   &kp U                     &kp Y                 &kp SEMI              &kp BSLH
&mt LA(LC(LG(LEFT_SHIFT))) CAPS  &hrmLeft LEFT_GUI A  &hrmLeft LEFT_ALT R  &hrmLeft LEFT_CONTROL S  &hrmLeft LEFT_SHIFT T  &kp G            &kp LEFT_ARROW   &kp M       &hrmRight LEFT_SHIFT N  &hrmRight LEFT_CONTROL E  &hrmRight LEFT_ALT I  &hrmRight LEFT_GUI O  &kp APOS
&kp LEFT_SHIFT                   &kp Z                &kp X                &kp C                    &kp D                  &kp V            &kp RIGHT_ARROW  &kp K       &kp H                   &kp COMMA                 &kp DOT               &kp FSLH              &kp LEFT_SHIFT
&kp C_MUTE                       &sk LCTRL            &sk LEFT_GUI         &sk LALT                 &customlt 3 SPACE      &sticky LSHFT    &kp LG(LS(S))    &kp DELETE  &customlt 4 BACKSPACE   &sk LEFT_ALT              &sk RGUI              &sk LEFT_CONTROL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "colemak";
        };

        qwerty {
            bindings = <
&trans  &kp N1               &kp N2               &kp N3                   &kp N4                 &kp N5    &trans  &kp N6  &kp N7                  &kp N8                    &kp N9                &kp N0                   &trans
&trans  &kp Q                &kp W                &kp E                    &kp R                  &kp T     &trans  &kp Y   &kp U                   &kp I                     &kp O                 &kp P                    &trans
&trans  &hrmLeft LEFT_GUI A  &hrmLeft LEFT_ALT S  &hrmLeft LEFT_CONTROL D  &hrmLeft LEFT_SHIFT F  &kp G     &trans  &kp H   &hrmRight LEFT_SHIFT J  &hrmRight LEFT_CONTROL K  &hrmRight LEFT_ALT L  &hrmRight LEFT_GUI SEMI  &trans
&trans  &kp Z                &kp X                &kp C                    &kp V                  &kp B     &trans  &kp N   &kp M                   &trans                    &trans                &trans                   &trans
&trans  &trans               &trans               &trans                   &trans                 &trans    &trans  &trans  &trans                  &trans                    &trans                &trans
            >;

            label = "qwerty";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        game {
            label = "game";
            bindings = <
&kp ESCAPE        &kp N1  &kp N2  &kp N3        &kp N4     &kp N5              &trans  &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &trans
&kp TAB           &kp Q   &kp W   &kp E         &kp R      &kp T               &trans  &kp Y   &kp U   &kp I      &kp O    &kp P     &trans
&kp LEFT_SHIFT    &kp A   &kp S   &kp D         &kp F      &kp G               &trans  &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp APOS
&kp LEFT_CONTROL  &kp Z   &kp X   &kp C         &kp V      &kp B               &trans  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
&trans            &trans  &trans  &kp LEFT_ALT  &kp SPACE  &kp LEFT_CONTROL    &trans  &trans  &trans  &trans     &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };

        navmed {
            bindings = <
&bt BT_SEL 0  &kp F1        &kp F2        &kp F3            &kp F4          &kp F5      &mmv MOVE_UP     &kp F6                &kp F7          &kp F8         &kp F9             &kp F10        &kp F11
&bt BT_SEL 1  &trans        &mkp LCLK     &mkp MCLK         &mkp RCLK       &mkp MB4    &mmv MOVE_DOWN   &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS  &kp C_VOL_DN   &kp C_VOL_DN       &kp C_NEXT     &kp EQUAL
&bt BT_SEL 2  &sk LEFT_GUI  &sk LEFT_ALT  &sk LEFT_CONTROL  &sk LEFT_SHIFT  &mkp MB5    &mmv MOVE_LEFT   &caps_word            &kp LEFT        &kp DOWN       &kp UP_ARROW       &kp RIGHT      &trans
&bt BT_CLR    &undo         &cut          &copy             &paste          &redo       &mmv MOVE_RIGHT  &kp C_BRIGHTNESS_DEC  &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP        &kp END        &trans
&kp C_MUTE    &trans        &trans        &trans            &trans          &trans      &mkp LCLK        &trans                &kp C_PLAY      &trans         &kp LA(LC(SPACE))  &kp RIGHT_ALT
            >;

            display-name = "navmed";
            sensor-bindings = <&scroll_encoder>;
        };

        numrgb {
            bindings = <
&trans           &kp F1            &kp F2  &kp F3  &kp F4  &kp F5               &rgb_ug RGB_SPI  &kp F6  &kp F7     &kp F8            &kp F9        &kp F10       &kp F11
&rgb_ug RGB_BRI  &kp LEFT_BRACKET  &kp N7  &kp N8  &kp N9  &kp RIGHT_BRACKET    &rgb_ug RGB_SPD  &trans  &trans     &trans            &trans        &trans        &kp F12
&rgb_ug RGB_BRD  &kp SEMI          &kp N4  &kp N5  &kp N6  &kp MINUS            &rgb_ug RGB_EFR  &trans  &sk LSHFT  &sk LEFT_CONTROL  &sk LEFT_ALT  &sk LEFT_GUI  &trans
&trans           &kp GRAVE         &kp N1  &kp N2  &kp N3  &kp EQUAL            &rgb_ug RGB_EFF  &trans  &trans     &trans            &trans        &trans        &trans
&trans           &trans            &trans  &trans  &kp N0  &kp BACKSLASH        &rgb_ug RGB_TOG  &trans  &trans     &trans            &trans        &trans
            >;
        };
    };
};
